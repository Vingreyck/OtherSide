import socket
import threading
import pickle
import struct
import cv2
import numpy as np
import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox
from PIL import Image, ImageTk
import time

class RemoteClient:
    def __init__(self, root):
        self.root = root
        self.root.title("Remote Control Client")
        self.root.geometry("1200x800")
        
        # Variáveis de conexão e controle
        self.socket = None
        self.connected = False
        self.receive_thread = None
        self.heartbeat_thread = None
        self.screen_buffer = None
        self.last_mouse_move = 0
        self.mouse_throttle = 0.05
        self.last_screen_update = 0
        
        # Rastreamento da escala real
        self.server_width = 0  # Largura real do servidor
        self.server_height = 0  # Altura real do servidor
        self.scale_x = 1.0  # Fator de escala horizontal
        self.scale_y = 1.0  # Fator de escala vertical
        
        # Configurar interface
        self.create_interface()
    
    def create_interface(self):
        """Interface gráfica simplificada"""
        main_frame = ttk.Frame(self.root)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # Frame de conexão
        conn_frame = ttk.LabelFrame(main_frame, text="Conexão")
        conn_frame.pack(fill=tk.X, padx=5, pady=5)
        
        # Entradas simplificadas
        ttk.Label(conn_frame, text="Host:").grid(row=0, column=0, padx=5, pady=5)
        self.host_entry = ttk.Entry(conn_frame, width=20)
        self.host_entry.insert(0, "localhost")
        self.host_entry.grid(row=0, column=1, padx=5, pady=5)
        
        ttk.Label(conn_frame, text="Porta:").grid(row=0, column=2, padx=5, pady=5)
        self.port_entry = ttk.Entry(conn_frame, width=8)
        self.port_entry.insert(0, "9999")
        self.port_entry.grid(row=0, column=3, padx=5, pady=5)
        
        self.connect_button = ttk.Button(conn_frame, text="Conectar", command=self.toggle_connection)
        self.connect_button.grid(row=0, column=4, padx=5, pady=5)
        
        # Frame de controles
        control_frame = ttk.Frame(main_frame)
        control_frame.pack(fill=tk.X, padx=5, pady=5)
        
        # Qualidade e botões
        ttk.Label(control_frame, text="Qualidade:").pack(side=tk.LEFT, padx=5)
        self.quality_var = tk.StringVar(value="Normal")
        quality_combo = ttk.Combobox(control_frame, textvariable=self.quality_var, 
                                     values=["Baixa", "Normal", "Alta"], width=8, state="readonly")
        quality_combo.pack(side=tk.LEFT, padx=5)
        quality_combo.bind("<<ComboboxSelected>>", self.change_quality)
        
        ttk.Button(control_frame, text="Info Sistema", command=self.get_system_info).pack(side=tk.LEFT, padx=5)
        ttk.Button(control_frame, text="Executar CMD", command=self.open_command_dialog).pack(side=tk.LEFT, padx=5)
        
        # Frame de visualização com barra de status
        view_frame = ttk.LabelFrame(main_frame, text="Tela Remota")
        view_frame.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # Adicionando status da escala na parte superior
        self.status_label = ttk.Label(view_frame, text="Sem conexão")
        self.status_label.pack(anchor=tk.W, padx=5, pady=2)
        
        # Canvas com scroll
        canvas_frame = ttk.Frame(view_frame)
        canvas_frame.pack(fill=tk.BOTH, expand=True)
        
        # Canvas para exibir tela remota
        self.canvas = tk.Canvas(canvas_frame, bg="black")
        self.canvas.pack(fill=tk.BOTH, expand=True)
        
        # Eventos
        self.canvas.bind("<Motion>", self.on_mouse_move)
        self.canvas.bind("<Button-1>", lambda e: self.send_mouse_click("left"))
        self.canvas.bind("<Button-3>", lambda e: self.send_mouse_click("right"))
        self.canvas.bind("<Key>", self.on_key_press)
        self.canvas.focus_set()
        
        # Console de log simplificado
        log_frame = ttk.LabelFrame(main_frame, text="Log")
        log_frame.pack(fill=tk.X, padx=5, pady=5)
        
        self.log_console = scrolledtext.ScrolledText(log_frame, height=6)
        self.log_console.pack(fill=tk.BOTH)
    
    def log(self, message):
        """Adiciona mensagem ao console"""
        self.log_console.config(state=tk.NORMAL)
        self.log_console.insert(tk.END, f"{time.strftime('%H:%M:%S')} - {message}\n")
        self.log_console.see(tk.END)
        self.log_console.config(state=tk.DISABLED)
    
    def toggle_connection(self):
        """Alterna entre conectar e desconectar"""
        if not self.connected:
            self.connect()
        else:
            self.disconnect()
    
    def connect(self):
        """Estabelece conexão com o servidor"""
        host = self.host_entry.get()
        port = int(self.port_entry.get())
        
        try:
            self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_RCVBUF, 1048576)
            self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_SNDBUF, 1048576)
            self.socket.settimeout(10.0)
            
            self.log(f"Conectando a {host}:{port}...")
            self.socket.connect((host, port))
            self.connected = True
            
            # Solicita informações do servidor primeiro
            self.send_data("get_screen_size")
            
            self.connect_button.config(text="Desconectar")
            self.log(f"Conectado a {host}:{port}")
            
            # Inicia threads
            self.receive_thread = threading.Thread(target=self.receive_data)
            self.receive_thread.daemon = True
            self.receive_thread.start()
            
            self.heartbeat_thread = threading.Thread(target=self.heartbeat)
            self.heartbeat_thread.daemon = True
            self.heartbeat_thread.start()
            
        except Exception as e:
            self.log(f"Erro de conexão: {e}")
            messagebox.showerror("Erro", str(e))
            if self.socket:
                self.socket.close()
                self.socket = None
    
    def heartbeat(self):
        """Envia heartbeat periódico"""
        while self.connected:
            try:
                time.sleep(5)
                if self.connected:
                    self.send_data("heartbeat")
            except:
                pass
    
    def disconnect(self):
        """Encerra conexão"""
        self.connected = False
        
        if self.socket:
            try:
                self.socket.close()
            except:
                pass
            self.socket = None
            
        self.connect_button.config(text="Conectar")
        self.canvas.delete("all")
        self.status_label.config(text="Sem conexão")
        self.log("Desconectado")
    
    def send_data(self, data):
        """Envia dados ao servidor"""
        if not self.connected or not self.socket:
            return False
        
        try:
            serialized = pickle.dumps(data)
            header = struct.pack("Q", len(serialized))
            self.socket.sendall(header)
            
            # Envia em chunks
            bytes_sent = 0
            while bytes_sent < len(serialized):
                chunk_size = min(32768, len(serialized) - bytes_sent)
                self.socket.sendall(serialized[bytes_sent:bytes_sent + chunk_size])
                bytes_sent += chunk_size
                
            return True
        except Exception as e:
            self.log(f"Erro ao enviar dados: {e}")
            self.disconnect()
            return False
    
    def receive_data(self):
        """Recebe dados do servidor"""
        buffer_incomplete = False
        incomplete_data = b""
        data_size = 0
        
        while self.connected:
            try:
                if not buffer_incomplete:
                    header = self.socket.recv(8)
                    if not header or len(header) < 8:
                        raise ConnectionError("Cabeçalho incompleto ou conexão fechada")
                    
                    data_size = struct.unpack("Q", header)[0]
                    if data_size > 100000000:  # Limite de 100MB
                        raise ConnectionError("Tamanho de dados inválido")
                    
                    data = b""
                    remaining = data_size
                else:
                    data = incomplete_data
                    remaining = data_size - len(data)
                    buffer_incomplete = False
                
                self.socket.settimeout(10.0)
                
                start_time = time.time()
                while remaining > 0:
                    if time.time() - start_time > 30:
                        raise socket.timeout("Timeout de recebimento excedido")
                    
                    try:
                        chunk_size = min(remaining, 32768)
                        chunk = self.socket.recv(chunk_size)
                        
                        if not chunk:
                            raise ConnectionError("Conexão fechada durante recebimento")
                        
                        data += chunk
                        remaining -= len(chunk)
                    except socket.timeout:
                        if len(data) > 0:
                            incomplete_data = data
                            buffer_incomplete = True
                            break
                        else:
                            raise
                
                if buffer_incomplete:
                    continue
                
                # Processa dados recebidos
                decoded_data = pickle.loads(data)
                
                if isinstance(decoded_data, dict) and "screen_size" in decoded_data:
                    # Atualiza informações de tamanho e escala da tela
                    self.server_width, self.server_height = decoded_data["screen_size"]
                    self.update_scale_factors()
                    self.log(f"Tela do servidor: {self.server_width}x{self.server_height}")
                elif isinstance(decoded_data, (bytes, bytearray, np.ndarray)):
                    # É uma imagem - atualizar na interface
                    self.screen_buffer = decoded_data
                    current_time = time.time()
                    if current_time - self.last_screen_update >= 0.05:
                        self.root.after(0, self.display_screen, decoded_data)
                        self.last_screen_update = current_time
                elif isinstance(decoded_data, (dict, str)):
                    # É uma mensagem ou informação
                    if decoded_data != "heartbeat_ok":
                        self.log(f"Mensagem: {decoded_data}")
                
            except socket.timeout:
                self.log("Timeout de conexão - tentando continuar...")
            except Exception as e:
                self.log(f"Erro no recebimento: {e}")
                self.disconnect()
                break
    
    def update_scale_factors(self):
        """Atualiza os fatores de escala com base nos tamanhos atual do canvas"""
        # Obtém tamanho atual do canvas
        canvas_width = self.canvas.winfo_width()
        canvas_height = self.canvas.winfo_height()
        
        if canvas_width > 1 and canvas_height > 1 and self.server_width > 0 and self.server_height > 0:
            self.scale_x = self.server_width / canvas_width
            self.scale_y = self.server_height / canvas_height
            self.status_label.config(text=f"Servidor: {self.server_width}x{self.server_height} | Escala: {self.scale_x:.2f}x, {self.scale_y:.2f}y")
    
    def display_screen(self, image_buffer):
        """Exibe imagem recebida do servidor"""
        if not self.connected:
            return
            
        try:
            # Converte buffer para imagem
            nparr = np.frombuffer(image_buffer, np.uint8)
            frame = cv2.imdecode(nparr, cv2.IMREAD_COLOR)
            frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            
            # Converte para formato do Tkinter
            img = Image.fromarray(frame)
            imgtk = ImageTk.PhotoImage(image=img)
            
            # Exibe no canvas e atualiza escala
            canvas_width, canvas_height = img.width, img.height
            self.canvas.config(width=canvas_width, height=canvas_height)
            self.canvas.delete("all")
            self.canvas.create_image(0, 0, anchor=tk.NW, image=imgtk)
            self.canvas.image = imgtk
            
            # Atualiza fatores de escala
            self.update_scale_factors()
            
        except Exception as e:
            self.log(f"Erro ao exibir imagem: {e}")
    
    def on_mouse_move(self, event):
        """Envia evento de movimento do mouse com coordenadas corrigidas"""
        if self.connected:
            current_time = time.time()
            if current_time - self.last_mouse_move >= self.mouse_throttle:
                # Aplica correção de escala às coordenadas do mouse
                server_x = int(event.x * self.scale_x)
                server_y = int(event.y * self.scale_y)
                self.send_data(f"mouse_move {server_x} {server_y}")
                self.last_mouse_move = current_time
    
    def send_mouse_click(self, button):
        """Envia clique do mouse"""
        if self.connected:
            self.send_data(f"mouse_click {button}")
    
    def on_key_press(self, event):
        """Envia evento de teclado"""
        if self.connected and event.char:
            self.send_data(f"keyboard {event.char}")
    
    def get_system_info(self):
        """Solicita informações do sistema"""
        if self.connected:
            self.send_data("system_info")
    
    def change_quality(self, event):
        """Altera a qualidade da transmissão"""
        if self.connected:
            quality = self.quality_var.get()
            self.send_data(f"quality {quality}")
            self.log(f"Qualidade: {quality}")
    
    def open_command_dialog(self):
        """Abre diálogo para executar comando"""
        if not self.connected:
            return
        
        dialog = tk.Toplevel(self.root)
        dialog.title("Executar Comando")
        dialog.geometry("400x150")
        
        ttk.Label(dialog, text="Digite o comando:").pack(pady=10)
        
        command_entry = ttk.Entry(dialog, width=50)
        command_entry.pack(pady=10)
        
        def execute_command():
            cmd = command_entry.get()
            if cmd:
                self.send_data(f"exec {cmd}")
                dialog.destroy()
        
        ttk.Button(dialog, text="Executar", command=execute_command).pack(pady=10)
    
    def on_closing(self):
        """Tratamento de fechamento da janela"""
        if self.connected:
            self.disconnect()
        self.root.destroy()

def main():
    root = tk.Tk()
    app = RemoteClient(root)
    root.update()
    root.protocol("WM_DELETE_WINDOW", app.on_closing)
    root.mainloop()

if __name__ == "__main__":
    main()