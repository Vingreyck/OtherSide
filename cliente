import socket
import threading
import pickle
import struct
import cv2
import pyngrok.ngrok as ngrok
import numpy as np
import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox
from PIL import Image, ImageTk
import time

class RemoteClient:
    def __init__(self, root):
        self.root = root
        self.root.title("Remote Control Client")
        self.root.geometry("1200x800")
        self.root.state('zoomed')  # Maximiza a janela
        
        # Variáveis de conexão e controle
        self.socket = None
        self.connected = False
        self.receive_thread = None
        self.heartbeat_thread = None
        self.screen_buffer = None
        self.last_mouse_move = 0
        self.mouse_throttle = 0.05
        self.last_screen_update = 0
        
        # Rastreamento da escala real
        self.server_width = 0  # Largura real do servidor
        self.server_height = 0  # Altura real do servidor
        self.scale_x = 1.0  # Fator de escala horizontal
        self.scale_y = 1.0  # Fator de escala vertical
        self.canvas_image = None  # Referência para a imagem no canvas
        self.current_image = None  # Referência para a imagem atual
        
        # Configurar interface
        self.create_interface()
        
        # Vincular evento de redimensionamento da janela
        self.root.bind("<Configure>", self.on_window_resize)
    
    def create_interface(self):
        """Interface gráfica simplificada"""
        main_frame = ttk.Frame(self.root)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # Frame de conexão
        conn_frame = ttk.LabelFrame(main_frame, text="Conexão")
        conn_frame.pack(fill=tk.X, padx=5, pady=5)
        
        # Entradas simplificadas
        ttk.Label(conn_frame, text="Host:").grid(row=0, column=0, padx=5, pady=5)
        self.host_entry = ttk.Entry(conn_frame, width=20)
        self.host_entry.insert(0, "localhost")
        self.host_entry.grid(row=0, column=1, padx=5, pady=5)
        
        ttk.Label(conn_frame, text="Porta:").grid(row=0, column=2, padx=5, pady=5)
        self.port_entry = ttk.Entry(conn_frame, width=8)
        self.port_entry.insert(0, "9999")
        self.port_entry.grid(row=0, column=3, padx=5, pady=5)
        
        self.connect_button = ttk.Button(conn_frame, text="Conectar", command=self.toggle_connection)
        self.connect_button.grid(row=0, column=4, padx=5, pady=5)
        
        # Botão para conexão via ngrok (solicita entrada dos dados)
        self.ngrok_button = ttk.Button(conn_frame, text="Usar Ngrok", command=self.prompt_ngrok_info)
        self.ngrok_button.grid(row=0, column=5, padx=5, pady=5)
        
        # Frame de visualização com barra de status
        self.view_frame = ttk.LabelFrame(main_frame, text="Tela Remota")
        self.view_frame.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # Adicionando status da escala na parte superior
        self.status_label = ttk.Label(self.view_frame, text="Sem conexão")
        self.status_label.pack(anchor=tk.W, padx=5, pady=2)
        
        # Canvas com scroll - Importante usar pack com fill e expand
        self.canvas_frame = ttk.Frame(self.view_frame)
        self.canvas_frame.pack(fill=tk.BOTH, expand=True)
        
        # Canvas para exibir tela remota
        self.canvas = tk.Canvas(self.canvas_frame, bg="black")
        self.canvas.pack(fill=tk.BOTH, expand=True)
        
        # Eventos
        self.canvas.bind("<Motion>", self.on_mouse_move)
        self.canvas.bind("<Button-1>", lambda e: self.send_mouse_click("left"))
        self.canvas.bind("<Button-3>", lambda e: self.send_mouse_click("right"))
        self.canvas.bind("<KeyPress>", self.on_key_press)
        self.canvas.focus_set()
        
        # Console de log simplificado
        log_frame = ttk.LabelFrame(main_frame, text="Log")
        log_frame.pack(fill=tk.X, padx=5, pady=5)
        
        self.log_console = scrolledtext.ScrolledText(log_frame, height=6)
        self.log_console.pack(fill=tk.BOTH)
    
    def prompt_ngrok_info(self):
        """Solicita informações de conexão ngrok ao usuário"""
        ngrok_dialog = tk.Toplevel(self.root)
        ngrok_dialog.title("Conexão Ngrok")
        ngrok_dialog.geometry("400x150")
        ngrok_dialog.transient(self.root)
        ngrok_dialog.grab_set()
        
        ttk.Label(ngrok_dialog, text="Entre com as informações do túnel ngrok:").pack(pady=10)
        
        info_frame = ttk.Frame(ngrok_dialog)
        info_frame.pack(fill=tk.X, padx=10, pady=5)
        
        ttk.Label(info_frame, text="Host ngrok:").grid(row=0, column=0, padx=5, pady=5, sticky=tk.W)
        ngrok_host_entry = ttk.Entry(info_frame, width=30)
        ngrok_host_entry.grid(row=0, column=1, padx=5, pady=5)
        
        ttk.Label(info_frame, text="Porta ngrok:").grid(row=1, column=0, padx=5, pady=5, sticky=tk.W)
        ngrok_port_entry = ttk.Entry(info_frame, width=30)
        ngrok_port_entry.grid(row=1, column=1, padx=5, pady=5)
        
        def apply_ngrok_info():
            host = ngrok_host_entry.get().strip()
            port = ngrok_port_entry.get().strip()
            
            if host and port:
                self.host_entry.delete(0, tk.END)
                self.host_entry.insert(0, host)
                
                self.port_entry.delete(0, tk.END)
                self.port_entry.insert(0, port)
                
                self.log(f"Configurado para usar ngrok: {host}:{port}")
            
            ngrok_dialog.destroy()
        
        # Este botão deve estar dentro da função prompt_ngrok_info
        ttk.Button(ngrok_dialog, text="Aplicar", command=apply_ngrok_info).pack(pady=10)
    
    def on_window_resize(self, event):
        """Manipula evento de redimensionamento da janela"""
        # Verifica se o evento veio da janela principal e não de um widget filho
        if event.widget == self.root:
            # Atualiza fatores de escala
            self.update_scale_factors()
            # Se tivermos uma imagem atual, redimensione-a para se ajustar ao novo tamanho
            if self.connected and self.screen_buffer is not None:
                self.root.after(100, lambda: self.display_screen(self.screen_buffer))
    
    def log(self, message):
        """Adiciona mensagem ao console"""
        self.log_console.config(state=tk.NORMAL)
        self.log_console.insert(tk.END, f"{time.strftime('%H:%M:%S')} - {message}\n")
        self.log_console.see(tk.END)
        self.log_console.config(state=tk.DISABLED)
    
    def toggle_connection(self):
        """Alterna entre conectar e desconectar"""
        if not self.connected:
            self.connect()
        else:
            self.disconnect()
    
    def connect(self):
        """Estabelece conexão com o servidor"""
        host = self.host_entry.get()
        port = int(self.port_entry.get())
        
        try:
            self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_RCVBUF, 1048576)
            self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_SNDBUF, 1048576)
            self.socket.settimeout(10.0)
            
            self.log(f"Conectando a {host}:{port}...")
            self.socket.connect((host, port))
            self.connected = True
            
            # Solicita informações do servidor primeiro
            self.send_data("get_screen_size")
            
            self.connect_button.config(text="Desconectar")
            self.log(f"Conectado a {host}:{port}")
            
            # Inicia threads
            self.receive_thread = threading.Thread(target=self.receive_data)
            self.receive_thread.daemon = True
            self.receive_thread.start()
            
            self.heartbeat_thread = threading.Thread(target=self.heartbeat)
            self.heartbeat_thread.daemon = True
            self.heartbeat_thread.start()
            
        except Exception as e:
            self.log(f"Erro de conexão: {e}")
            messagebox.showerror("Erro", str(e))
            if self.socket:
                self.socket.close()
                self.socket = None
    
    def heartbeat(self):
        """Envia heartbeat periódico"""
        while self.connected:
            try:
                time.sleep(5)
                if self.connected:
                    self.send_data("heartbeat")
            except:
                pass
    
    def disconnect(self):
        """Encerra conexão"""
        self.connected = False
        
        if self.socket:
            try:
                self.socket.close()
            except:
                pass
            self.socket = None
            
        self.connect_button.config(text="Conectar")
        self.canvas.delete("all")
        self.status_label.config(text="Sem conexão")
        self.log("Desconectado")
    
    def send_data(self, data):
        """Envia dados ao servidor"""
        if not self.connected or not self.socket:
            return False
        
        try:
            serialized = pickle.dumps(data)
            header = struct.pack("Q", len(serialized))
            self.socket.sendall(header)
            
            # Envia em chunks
            bytes_sent = 0
            while bytes_sent < len(serialized):
                chunk_size = min(32768, len(serialized) - bytes_sent)
                self.socket.sendall(serialized[bytes_sent:bytes_sent + chunk_size])
                bytes_sent += chunk_size
                
            return True
        except Exception as e:
            self.log(f"Erro ao enviar dados: {e}")
            self.disconnect()
            return False
    
    def receive_data(self):
        """Recebe dados do servidor"""
        buffer_incomplete = False
        incomplete_data = b""
        data_size = 0
        
        while self.connected:
            try:
                if not buffer_incomplete:
                    header = self.socket.recv(8)
                    if not header or len(header) < 8:
                        raise ConnectionError("Cabeçalho incompleto ou conexão fechada")
                    
                    data_size = struct.unpack("Q", header)[0]
                    if data_size > 100000000:  # Limite de 100MB
                        raise ConnectionError("Tamanho de dados inválido")
                    
                    data = b""
                    remaining = data_size
                else:
                    data = incomplete_data
                    remaining = data_size - len(data)
                    buffer_incomplete = False
                
                self.socket.settimeout(10.0)
                
                start_time = time.time()
                while remaining > 0:
                    if time.time() - start_time > 30:
                        raise socket.timeout("Timeout de recebimento excedido")
                    
                    try:
                        chunk_size = min(remaining, 32768)
                        chunk = self.socket.recv(chunk_size)
                        
                        if not chunk:
                            raise ConnectionError("Conexão fechada durante recebimento")
                        
                        data += chunk
                        remaining -= len(chunk)
                    except socket.timeout:
                        if len(data) > 0:
                            incomplete_data = data
                            buffer_incomplete = True
                            break
                        else:
                            raise
                
                if buffer_incomplete:
                    continue
                
                # Processa dados recebidos
                decoded_data = pickle.loads(data)
                
                if isinstance(decoded_data, dict) and "screen_size" in decoded_data:
                    # Atualiza informações de tamanho e escala da tela
                    self.server_width, self.server_height = decoded_data["screen_size"]
                    self.log(f"Tela do servidor: {self.server_width}x{self.server_height}")
                    self.update_scale_factors()
                elif isinstance(decoded_data, (bytes, bytearray, np.ndarray)):
                    # É uma imagem - atualizar na interface
                    self.screen_buffer = decoded_data
                    current_time = time.time()
                    if current_time - self.last_screen_update >= 0.05:
                        self.root.after(0, self.display_screen, decoded_data)
                        self.last_screen_update = current_time
                elif isinstance(decoded_data, (dict, str)):
                    # É uma mensagem ou informação
                    if decoded_data != "heartbeat_ok":
                        self.log(f"Mensagem: {decoded_data}")
                
            except socket.timeout:
                self.log("Timeout de conexão - tentando continuar...")
            except Exception as e:
                self.log(f"Erro no recebimento: {e}")
                self.disconnect()
                break
    
    def update_scale_factors(self):
        """Atualiza os fatores de escala com base nos tamanhos do canvas e servidor"""
        # Obtém tamanho atual do canvas
        canvas_width = self.canvas.winfo_width()
        canvas_height = self.canvas.winfo_height()
        
        if canvas_width > 1 and canvas_height > 1 and self.server_width > 0 and self.server_height > 0:
            # Calcular proporção para mapear as coordenadas do cliente para o servidor
            self.scale_x = self.server_width / canvas_width
            self.scale_y = self.server_height / canvas_height
            
            self.status_label.config(text=f"Servidor: {self.server_width}x{self.server_height} | " 
                                      f"Canvas: {canvas_width}x{canvas_height} | "
                                      f"Escala: {self.scale_x:.2f}x, {self.scale_y:.2f}y")
    
    def display_screen(self, image_buffer):
        """Exibe imagem recebida do servidor"""
        if not self.connected:
            return
            
        try:
            # Converte buffer para imagem
            nparr = np.frombuffer(image_buffer, np.uint8)
            frame = cv2.imdecode(nparr, cv2.IMREAD_COLOR)
            frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            
            # Obtém tamanho do canvas atual
            canvas_width = self.canvas.winfo_width()
            canvas_height = self.canvas.winfo_height()
            
            # Se o canvas tem tamanho válido, redimensiona a imagem para caber nele
            if canvas_width > 10 and canvas_height > 10:
                # Calcular proporção para manter a relação de aspecto
                img_height, img_width = frame.shape[:2]
                ratio = min(canvas_width/img_width, canvas_height/img_height)
                
                # Redimensiona a imagem para caber no canvas, mantendo a proporção
                new_width = int(img_width * ratio)
                new_height = int(img_height * ratio)
                
                # Redimensionar a imagem para o tamanho do canvas
                resized_frame = cv2.resize(frame, (new_width, new_height))
                
                # Converte para formato do Tkinter
                self.current_image = Image.fromarray(resized_frame)
                imgtk = ImageTk.PhotoImage(image=self.current_image)
                
                # Exibe no canvas
                self.canvas.delete("all")
                self.canvas_image = self.canvas.create_image(
                    canvas_width//2, canvas_height//2,  # Centraliza a imagem no canvas
                    anchor=tk.CENTER, 
                    image=imgtk
                )
                self.canvas.image = imgtk  # Mantém referência para evitar coleta de lixo
                
                # Atualiza fatores de escala depois de ajustar a imagem
                self.update_scale_factors()
            
        except Exception as e:
            self.log(f"Erro ao exibir imagem: {e}")
    
    def on_mouse_move(self, event):
        """Envia evento de movimento do mouse com coordenadas corrigidas"""
        if self.connected:
            current_time = time.time()
            if current_time - self.last_mouse_move >= self.mouse_throttle:
                # Obtém tamanho atual do canvas
                canvas_width = self.canvas.winfo_width()
                canvas_height = self.canvas.winfo_height()
                
                if canvas_width > 1 and canvas_height > 1 and self.current_image:
                    # Ajustar as coordenadas considerando a posição centralizada da imagem
                    img_width, img_height = self.current_image.size
                    
                    # Calcula a posição da imagem dentro do canvas
                    x_offset = (canvas_width - img_width) // 2
                    y_offset = (canvas_height - img_height) // 2
                    
                    # Ajusta as coordenadas do mouse relativo à imagem, não ao canvas
                    rel_x = event.x - x_offset
                    rel_y = event.y - y_offset
                    
                    # Apenas processar se o clique estiver dentro da imagem
                    if 0 <= rel_x < img_width and 0 <= rel_y < img_height:
                        # Mapeamento das coordenadas do cliente para o servidor
                        server_x = int((rel_x / img_width) * self.server_width)
                        server_y = int((rel_y / img_height) * self.server_height)
                        
                        self.send_data(f"mouse_move {server_x} {server_y}")
                        self.last_mouse_move = current_time
    
    def send_mouse_click(self, button):
        """Envia clique do mouse"""
        if self.connected:
            # Apenas enviar clique se o mouse estiver sobre a imagem
            x, y = self.canvas.winfo_pointerxy()
            x -= self.canvas.winfo_rootx()
            y -= self.canvas.winfo_rooty()
            
            canvas_width = self.canvas.winfo_width()
            canvas_height = self.canvas.winfo_height()
            
            if self.current_image:
                img_width, img_height = self.current_image.size
                
                # Calcula a posição da imagem dentro do canvas
                x_offset = (canvas_width - img_width) // 2
                y_offset = (canvas_height - img_height) // 2
                
                # Ajusta as coordenadas do mouse relativo à imagem
                rel_x = x - x_offset
                rel_y = y - y_offset
                
                # Apenas processar se o clique estiver dentro da imagem
                if 0 <= rel_x < img_width and 0 <= rel_y < img_height:
                    self.send_data(f"mouse_click {button}")
    
    def on_key_press(self, event):
        """Envia evento de teclado com a tecla exata"""
        if self.connected:
            # Enviar o keysym (representação da tecla) em vez do caractere
            key = event.keysym
            self.send_data(f"key {key}")
    
    def on_closing(self):
        """Tratamento de fechamento da janela"""
        if self.connected:
            self.disconnect()
        self.root.destroy()

def main():
    root = tk.Tk()
    app = RemoteClient(root)
    root.update()
    root.protocol("WM_DELETE_WINDOW", app.on_closing)
    root.mainloop()

if __name__ == "__main__":
    main()