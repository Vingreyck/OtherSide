import socket
import threading
import pickle
import struct
import cv2
import numpy as np
import pyautogui
import platform
from PIL import ImageGrab
from queue import Queue
import time

class RemoteServer:
    def __init__(self, host='0.0.0.0', port=9999):
        self.host = host
        self.port = port
        
        # Configuração do socket
        self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        
        # Gerenciamento de clientes
        self.clients = []
        self.command_queue = Queue()
        
        # Flags de controle
        self.running = True
        self.screenshot_interval = 0.1  # 10 FPS (qualidade alta)
        
        # Configurações de captura (qualidade alta permanente)
        self.scale_factor = 0.5
        self.jpeg_quality = 70
        
        # Configuração de tela
        self.screen_size = pyautogui.size()
        
        # Desativa o failsafe do pyautogui
        pyautogui.FAILSAFE = False
    
    def start_server(self):
        """Inicia o servidor e aceita conexões"""
        try:
            self.server_socket.bind((self.host, self.port))
            self.server_socket.listen(5)
            print(f"Servidor iniciado em {self.host}:{self.port}")
            print(f"Tamanho da tela: {self.screen_size}")
            
            # Thread para processamento de comandos
            command_thread = threading.Thread(target=self.process_commands)
            command_thread.daemon = True
            command_thread.start()
            
            while self.running:
                client_socket, address = self.server_socket.accept()
                client_socket.setsockopt(socket.SOL_SOCKET, socket.SO_RCVBUF, 1048576)
                client_socket.setsockopt(socket.SOL_SOCKET, socket.SO_SNDBUF, 1048576)
                client_socket.settimeout(10.0)
                print(f"Conexão de {address}")
                
                client_thread = threading.Thread(target=self.handle_client, args=(client_socket,))
                client_thread.daemon = True
                client_thread.start()
                
                self.clients.append(client_socket)
        
        except Exception as e:
            print(f"Erro no servidor: {e}")
        finally:
            self.stop_server()
    
    def handle_client(self, client_socket):
        """Gerencia comunicação com cliente individual"""
        try:
            # Thread para streaming de tela
            screen_thread = threading.Thread(target=self.continuous_screen_capture, args=(client_socket,))
            screen_thread.daemon = True
            screen_thread.start()
            
            while self.running:
                # Recebe comandos do cliente
                command = self.receive_data(client_socket)
                
                if not command:
                    print("Comando vazio ou conexão fechada.")
                    break
                
                # Processamento de diferentes tipos de comandos
                if isinstance(command, str):
                    if command == "get_screen_size":
                        # Envia o tamanho real da tela do servidor para o cliente
                        self.send_data(client_socket, {"screen_size": self.screen_size})
                    
                    elif command.startswith('mouse_move'):
                        try:
                            _, x, y = command.split()
                            # As coordenadas já vêm mapeadas do cliente
                            self.command_queue.put(('mouse_move', (int(float(x)), int(float(y)))))
                        except Exception as e:
                            print(f"Erro em mouse_move: {e}")
                    
                    elif command.startswith('mouse_click'):
                        try:
                            _, button = command.split()
                            self.command_queue.put(('mouse_click', button))
                        except Exception as e:
                            print(f"Erro em mouse_click: {e}")
                    
                    elif command.startswith('key'):
                        try:
                            _, key = command.split()
                            self.command_queue.put(('key', key))
                        except Exception as e:
                            print(f"Erro em comando de teclado: {e}")
                    
                    elif command == 'heartbeat':
                        self.send_data(client_socket, 'heartbeat_ok')
        
        except Exception as e:
            print(f"Erro no cliente: {e}")
        finally:
            print("Cliente desconectado.")
            if client_socket in self.clients:
                self.clients.remove(client_socket)
            try:
                client_socket.close()
            except:
                pass
    
    def continuous_screen_capture(self, client_socket):
        """Captura contínua de tela"""
        try:
            last_capture_time = time.time()
            
            while self.running and client_socket in self.clients:
                current_time = time.time()
                if (current_time - last_capture_time) >= self.screenshot_interval:
                    try:
                        # Captura tela
                        screen = ImageGrab.grab()
                        screen_np = np.array(screen)
                        screen_np = cv2.cvtColor(screen_np, cv2.COLOR_RGB2BGR)
                        
                        # Redimensiona
                        scaled = cv2.resize(screen_np, (0,0), fx=self.scale_factor, fy=self.scale_factor)
                        
                        # Comprime
                        _, buffer = cv2.imencode('.jpg', scaled, [cv2.IMWRITE_JPEG_QUALITY, self.jpeg_quality])
                        
                        # Envia dados
                        success = self.send_data(client_socket, buffer)
                        if not success:
                            break
                        
                        last_capture_time = current_time
                    except Exception as e:
                        print(f"Erro na captura: {e}")
                        break
                else:
                    time.sleep(0.01)
        
        except Exception as e:
            print(f"Erro na captura de tela: {e}")
    
    def process_commands(self):
        """Processa comandos de controle"""
        while self.running:
            try:
                command_type, data = self.command_queue.get(timeout=0.01)
                
                if command_type == 'mouse_move':
                    x, y = data
                    pyautogui.moveTo(x, y, _pause=False)
                
                elif command_type == 'mouse_click':
                    pyautogui.click(button=data, _pause=False)
                
                elif command_type == 'key':
                    # Mapear teclas especiais se necessário
                    try:
                        if len(data) == 1:
                            # É um caractere simples
                            pyautogui.press(data.lower(), _pause=False)
                        else:
                            # Pode ser uma tecla especial
                            key_mapping = {
                                'space': 'space',
                                'Return': 'enter',
                                'BackSpace': 'backspace',
                                'Delete': 'delete',
                                'Tab': 'tab',
                                'Escape': 'esc',
                                'Up': 'up',
                                'Down': 'down',
                                'Left': 'left',
                                'Right': 'right',
                                'Home': 'home',
                                'End': 'end',
                                'Page_Up': 'pageup',
                                'Page_Down': 'pagedown',
                                'Insert': 'insert',
                                'F1': 'f1',
                                'F2': 'f2',
                                'F3': 'f3',
                                'F4': 'f4',
                                'F5': 'f5',
                                'F6': 'f6',
                                'F7': 'f7',
                                'F8': 'f8',
                                'F9': 'f9',
                                'F10': 'f10',
                                'F11': 'f11',
                                'F12': 'f12',
                                'Control_L': 'ctrl',
                                'Control_R': 'ctrl',
                                'Alt_L': 'alt',
                                'Alt_R': 'alt',
                                'Shift_L': 'shift',
                                'Shift_R': 'shift',
                                'Win_L': 'win',
                                'Win_R': 'win',
                                'Menu': 'menu',
                                'capslock': 'capslock',
                            }
                            
                            # Se for tecla mapeada, use o mapeamento, senão tente usar a tecla diretamente
                            key_to_press = key_mapping.get(data, data.lower())
                            pyautogui.press(key_to_press, _pause=False)
                    except Exception as e:
                        print(f"Erro ao processar tecla '{data}': {e}")
                
                self.command_queue.task_done()
            
            except Exception as e:
                # Timeout ou fila vazia
                pass
    
    def send_data(self, connection, data):
        """Envia dados serializados"""
        try:
            serialized = pickle.dumps(data)
            header = struct.pack("Q", len(serialized))
            connection.send(header)
            connection.sendall(serialized)
            return True
        except Exception as e:
            print(f"Erro ao enviar dados: {e}")
            if connection in self.clients:
                self.clients.remove(connection)
            return False
    
    def receive_data(self, connection):
        """Recebe dados serializados"""
        try:
            header = connection.recv(8)
            if not header or len(header) < 8:
                return None
                
            data_size = struct.unpack("Q", header)[0]
            
            if data_size > 100000000:  # Limite de 100MB
                return None
            
            data = b""
            remaining = data_size
            
            while remaining > 0:
                connection.settimeout(5.0)
                chunk_size = min(remaining, 32768)
                chunk = connection.recv(chunk_size)
                
                if not chunk:
                    return None
                
                data += chunk
                remaining -= len(chunk)
            
            connection.settimeout(10.0)
            return pickle.loads(data)
        
        except socket.timeout:
            return None
        except Exception as e:
            print(f"Erro ao receber dados: {e}")
            return None
    
    def stop_server(self):
        """Encerra o servidor"""
        self.running = False
        for client in self.clients:
            try:
                client.close()
            except:
                pass
        self.server_socket.close()

if __name__ == "__main__":
    server = RemoteServer()
    server.start_server()